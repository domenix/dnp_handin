@page
<!-- Clever hack for the vsCode razor formatter -->
@model CreateReservationModel
<!-- Clever hack for the vsCode razor formatter -->
@{ ViewData["Title"] = "Create a reservation"; }

<h2>Create a reservation</h2>

<div class="row">
    <div class="col-md-5">
        <h3>Select movie, time and an available seat.</h3>
        <ul class="list-group contrast-text">
            <li class="list-group-item">
                Movie: <select id="newScreeningMovie"></select>
            </li>
        </ul>
        <h4>Available screenings</h4>
        <div class="form-group" id="screenings">
        </div>
        <button id="reserveButton" type="button" class="button" disabled>Reserve</button>
    </div>
    <div class="col-md-5 col-md-offset-1">
        <div id="seats">
            <h3 class="hidden-md hidden-lg">Seats</h3>
            <hr> @{ int numberOfSeats = Model.numberOfSeats(); char[] letters = Enumerable.Range('A', 26).Select(x => (char) x).ToArray(); for(int i = 0; i
            < numberOfSeats; i++) { for(int j=0 ; j < numberOfSeats; j++) { <text>
                <div id=@letters[i]@j class="seat">@letters[i]@j</div>
                </text>
                }
                <text><br></text> } }
        </div>
    </div>
</div>

@section Scripts { @await Html.PartialAsync("_ValidationScriptsPartial")
<script>
    {
        let selectedSeat = undefined;
        $("#newScreeningMovie").change(function() {
            selectedSeat = undefined;
            $("#reserveButton").attr("disabled", true);
            refreshScreenings();
        });
        function buildScreening(id, title, date, duration) {
            //god I want React right about now
            const startDate = moment(date);
            const formattedStartDate = startDate.format("Do MMM | HH:mm");
            const endDate = startDate.add(duration, "minutes");
            const formattedEndDate = endDate.format("HH:mm");
            return $("<div/>", {
                class: "panel panel-default",
                onClick: "clicked(id)",
                id: id,
                html: $("<div/>", {
                    class: "panel-heading",
                    html: $("<div/>", {
                        class: "panel-title contrast-text",
                        text: formattedStartDate + " - " + formattedEndDate
                    })
                })
            });
        }
        const seatsDom = $("#seats");
        var currentlyClicked;
        function clicked(id)
        {     
            refreshScreenings();
            currentlyClicked = id;
            $("#" + id).css("border-color", "red")
        }
        function populateSeats(tickets) {
            for (var i = 0; i < tickets.length; i++) {
                $("#" + tickets[i].Seat).css("background-color", "red").addClass("reserved");
            }
            if (selectedSeat)
                $("#" + selectedSeat).css("background-color", "orange").addClass("selected");
            setSeatListeners();
            return true;
        }
        
        const screeningsDom = $("#screenings");
        async function refreshScreenings() {
            const screenings = await getScreenings();
            screeningsDom.empty();
            clearSeats();
            const selected = moviesDom.val();
            screenings.filter(({
                Movie: {
                    Id
                }
            }) => Id == selected).forEach(({
                Id,
                Date: date,
                Tickets: tickets,
                Movie: {
                    Title,
                    Duration
                }
            }) => {
                if(Id+"" == currentlyClicked)
                {
                    populateSeats(tickets);
                }
               
                buildScreening(Id, Title, date, Duration).appendTo(screeningsDom);

               
            })
        }
        const moviesDom = $("#newScreeningMovie");
        async function refreshMovies() {
            const movies = await getMoviesWithScreenings();
            moviesDom.empty();
            for (const {
                    Title,
                    Id
                } of movies) {
                $("<option/>", {
                    value: Id,
                    text: Title
                }).appendTo(moviesDom);
            }
        }

        async function clearSeats() {
            $(".seat").css("background-color", "darkgreen").css("cursor", "pointer").removeClass("reserved");
        }

        function setSeatListeners() {
            $('.seat').off("click")
            $('.seat:not(.reserved,.selected)').click(selectTicket);
        }

        function selectTicket() {
            $("#" + selectedSeat).removeClass("selected");
            selectedSeat = this.id;
            $(this).css("background-color", "orange").addClass("selected");
            $("#reserveButton").attr("disabled", false);
        }

        $("#reserveButton").click(async function() {
            await createTicket(currentlyClicked, "@Model.getUserId()", selectedSeat);
            refreshMovies();
            refreshScreenings();
            window.open("/","_self");
        })

        refreshMovies();
        refreshScreenings();
        const date = moment().add(1, "hour").toISOString(true);
    }
</script>
}